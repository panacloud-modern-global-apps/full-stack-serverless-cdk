export declare class EC2CapacityReservationsMetrics {
    static instanceUtilizationAverage(dimensions: {
        CapacityReservationId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            CapacityReservationId: string;
        };
        statistic: string;
    };
    static usedInstanceCountAverage(dimensions: {
        CapacityReservationId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            CapacityReservationId: string;
        };
        statistic: string;
    };
    static availableInstanceCountAverage(dimensions: {
        CapacityReservationId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            CapacityReservationId: string;
        };
        statistic: string;
    };
    static totalInstanceCountAverage(dimensions: {
        CapacityReservationId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            CapacityReservationId: string;
        };
        statistic: string;
    };
}
export declare class EBSMetrics {
    static volumeReadBytesSum(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
    static volumeWriteBytesSum(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
    static volumeReadOpsSum(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
    static volumeTotalReadTimeAverage(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
    static volumeWriteOpsSum(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
    static volumeTotalWriteTimeAverage(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
    static volumeIdleTimeAverage(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
    static volumeQueueLengthAverage(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
    static burstBalanceAverage(dimensions: {
        VolumeId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VolumeId: string;
        };
        statistic: string;
    };
}
export declare class EC2Metrics {
    static cpuUtilizationAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static statusCheckFailedSum(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static statusCheckFailedInstanceSum(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static statusCheckFailedSystemSum(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static diskReadBytesAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static diskReadOpsAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static diskWriteBytesAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static diskWriteOpsAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static networkInAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static networkOutAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static networkPacketsInAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
    static networkPacketsOutAverage(dimensions: {
        InstanceId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            InstanceId: string;
        };
        statistic: string;
    };
}
export declare class NATGatewayMetrics {
    static activeConnectionCountMaximum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static packetsDropCountSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static bytesInFromDestinationSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static bytesInFromSourceSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static bytesOutToDestinationSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static bytesOutToSourceSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static connectionAttemptCountSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static connectionEstablishedCountSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static errorPortAllocationSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static idleTimeoutCountSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static packetsInFromDestinationSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static packetsInFromSourceSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static packetsOutToDestinationSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
    static packetsOutToSourceSum(dimensions: {
        NatGatewayId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            NatGatewayId: string;
        };
        statistic: string;
    };
}
export declare class TransitGatewayMetrics {
    static bytesInSum(dimensions: {
        TransitGateway: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TransitGateway: string;
        };
        statistic: string;
    };
    static bytesOutSum(dimensions: {
        TransitGateway: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TransitGateway: string;
        };
        statistic: string;
    };
    static packetDropCountBlackholeSum(dimensions: {
        TransitGateway: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TransitGateway: string;
        };
        statistic: string;
    };
    static packetDropCountNoRouteSum(dimensions: {
        TransitGateway: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TransitGateway: string;
        };
        statistic: string;
    };
    static packetsInSum(dimensions: {
        TransitGateway: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TransitGateway: string;
        };
        statistic: string;
    };
    static packetsOutSum(dimensions: {
        TransitGateway: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            TransitGateway: string;
        };
        statistic: string;
    };
}
export declare class VPNMetrics {
    static tunnelDataInSum(dimensions: {
        VpnId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VpnId: string;
        };
        statistic: string;
    };
    static tunnelStateAverage(dimensions: {
        VpnId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VpnId: string;
        };
        statistic: string;
    };
    static tunnelDataOutSum(dimensions: {
        VpnId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensions: {
            VpnId: string;
        };
        statistic: string;
    };
}
