import { Resource } from '@aws-cdk/core';
import { Construct } from 'constructs';
import { IIdentity } from './identity-base';
import { IManagedPolicy } from './managed-policy';
import { Policy } from './policy';
import { PolicyStatement } from './policy-statement';
import { AddToPrincipalPolicyResult, IPrincipal, PrincipalPolicyFragment } from './principals';
import { IUser } from './user';
/**
 * Represents an IAM Group.
 *
 * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html
 * @stability stable
 */
export interface IGroup extends IIdentity {
    /**
     * Returns the IAM Group Name.
     *
     * @stability stable
     * @attribute true
     */
    readonly groupName: string;
    /**
     * Returns the IAM Group ARN.
     *
     * @stability stable
     * @attribute true
     */
    readonly groupArn: string;
}
/**
 * Properties for defining an IAM group.
 *
 * @stability stable
 */
export interface GroupProps {
    /**
     * A name for the IAM group.
     *
     * For valid values, see the GroupName parameter
     * for the CreateGroup action in the IAM API Reference. If you don't specify
     * a name, AWS CloudFormation generates a unique physical ID and uses that
     * ID for the group name.
     *
     * If you specify a name, you must specify the CAPABILITY_NAMED_IAM value to
     * acknowledge your template's capabilities. For more information, see
     * Acknowledging IAM Resources in AWS CloudFormation Templates.
     *
     * @default Generated by CloudFormation (recommended)
     * @stability stable
     */
    readonly groupName?: string;
    /**
     * A list of managed policies associated with this role.
     *
     * You can add managed policies later using
     * `addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(policyName))`.
     *
     * @default - No managed policies.
     * @stability stable
     */
    readonly managedPolicies?: IManagedPolicy[];
    /**
     * The path to the group.
     *
     * For more information about paths, see [IAM
     * Identifiers](http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html)
     * in the IAM User Guide.
     *
     * @default /
     * @stability stable
     */
    readonly path?: string;
}
declare abstract class GroupBase extends Resource implements IGroup {
    abstract readonly groupName: string;
    abstract readonly groupArn: string;
    /**
     * The principal to grant permissions to.
     *
     * @stability stable
     */
    readonly grantPrincipal: IPrincipal;
    /**
     * The AWS account ID of this principal.
     *
     * Can be undefined when the account is not known
     * (for example, for service principals).
     * Can be a Token - in that case,
     * it's assumed to be AWS::AccountId.
     *
     * @stability stable
     */
    readonly principalAccount: string | undefined;
    /**
     * When this Principal is used in an AssumeRole policy, the action to use.
     *
     * @stability stable
     */
    readonly assumeRoleAction: string;
    private readonly attachedPolicies;
    private defaultPolicy?;
    /**
     * Return the policy fragment that identifies this principal in a Policy.
     *
     * @stability stable
     */
    get policyFragment(): PrincipalPolicyFragment;
    /**
     * Attaches a policy to this group.
     *
     * @param policy The policy to attach.
     * @stability stable
     */
    attachInlinePolicy(policy: Policy): void;
    addManagedPolicy(_policy: IManagedPolicy): void;
    /**
     * Adds a user to this group.
     *
     * @stability stable
     */
    addUser(user: IUser): void;
    /**
     * Adds an IAM statement to the default policy.
     *
     * @stability stable
     */
    addToPrincipalPolicy(statement: PolicyStatement): AddToPrincipalPolicyResult;
    /**
     * Add to the policy of this principal.
     *
     * @stability stable
     */
    addToPolicy(statement: PolicyStatement): boolean;
}
/**
 * An IAM Group (collection of IAM users) lets you specify permissions for multiple users, which can make it easier to manage permissions for those users.
 *
 * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html
 * @stability stable
 */
export declare class Group extends GroupBase {
    /**
     * Import an external group by ARN.
     *
     * If the imported Group ARN is a Token (such as a
     * `CfnParameter.valueAsString` or a `Fn.importValue()`) *and* the referenced
     * group has a `path` (like `arn:...:group/AdminGroup/NetworkAdmin`), the
     * `groupName` property will not resolve to the correct value. Instead it
     * will resolve to the first path component. We unfortunately cannot express
     * the correct calculation of the full path name as a CloudFormation
     * expression. In this scenario the Group ARN should be supplied without the
     * `path` in order to resolve the correct group resource.
     *
     * @param scope construct scope.
     * @param id construct id.
     * @param groupArn the ARN of the group to import (e.g. `arn:aws:iam::account-id:group/group-name`).
     * @stability stable
     */
    static fromGroupArn(scope: Construct, id: string, groupArn: string): IGroup;
    /**
     * Returns the IAM Group Name.
     *
     * @stability stable
     */
    readonly groupName: string;
    /**
     * Returns the IAM Group ARN.
     *
     * @stability stable
     */
    readonly groupArn: string;
    private readonly managedPolicies;
    /**
     * @stability stable
     */
    constructor(scope: Construct, id: string, props?: GroupProps);
    /**
     * Attaches a managed policy to this group.
     *
     * @param policy The managed policy to attach.
     * @stability stable
     */
    addManagedPolicy(policy: IManagedPolicy): void;
}
export {};
